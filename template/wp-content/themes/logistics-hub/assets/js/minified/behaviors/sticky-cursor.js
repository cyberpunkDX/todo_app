class LiquidStickyCursorBehavior extends LiquidBehavior{static name="liquidStickyCursor";static initialModelProps={clientPos:{x:window.innerWidth/2,y:window.innerHeight/2},cursor:{x:window.innerWidth/2,y:window.innerHeight/2},isStuck:!1,isMagnetic:!1};static model=new Backbone.Model(this.initialModelProps);static initializeConditions=[!liquidTouchMM?.matches];static domEvents={"pointermove <document":"onDocPointerMove","pointerdown <document":"onDocPointerDown","pointerup <document":"onDocPointerUp"};static modelEvents={"change:cursor":"onChangeCursor"};hoveredEl=document.body;elsCollection=new Backbone.Collection;options(){return{duration:.2,ease:"power2.out",triggers:"body",els:[]}}get ui(){return{}}get bindToThis(){return["setCursorPos"]}initialize(){this.setElsOptions(),this.listenElsChangeActive(),this.setHoverInteractions(),gsap.ticker.add(this.setCursorPos)}setElsOptions(){const e=this.getOption("els"),o=_.omit(this._options,["els"]);e.forEach((c,i)=>{const t={...o,...c},s=new Backbone.Model({hideOthersWhenActive:!1,hoverInteractions:[],..._.omit(t,["hoverInteractions"]),el:this.view.el.querySelector(t.el),triggers:t.triggers==="body"?"body":this.view.el.querySelectorAll(t.triggers),isActive:!1,setters:{x:gsap[t.duration<=0?"quickSetter":"quickTo"](e[i].el,"x",t.duration<=0?"px":{duration:t.duration}),y:gsap[t.duration<=0?"quickSetter":"quickTo"](e[i].el,"y",t.duration<=0?"px":{duration:t.duration})}});t.hoverInteractions&&t.hoverInteractions.forEach(({selectors:n,animations:l})=>{const r=s.get("hoverInteractions")||[];s.set({hoverInteractions:[...r,{els:document.querySelectorAll(n),animations:l}]})}),e[i].model=s,this.elsCollection.add(s)})}listenElsChangeActive(){this.elsCollection.on("change:isActive",(e,o)=>{gsap.to(e.get("el"),{scale:o?1:0,duration:e.get("duration")})})}setCursorPos(){const e=this.model.get("clientPos"),o=this.model.get("cursor"),c=1-Math.pow(1-.4,gsap.ticker.deltaRatio());this.model.set({cursor:{x:o.x+(e.x-o.x)*c,y:o.y+(e.y-o.y)*c}})}onChangeCursor(e,{x:o,y:c}){this.elsCollection.forEach(i=>{const t=i.get("el"),s=i.get("triggers"),n=i.get("setters"),l=!!((s==="body"||[...s].find(r=>r===this.hoveredEl||r.contains(this.hoveredEl)))&&!this.elsCollection.filter(r=>r.cid!==i.cid).find(r=>r.get("isActive")&&r.get("hideOthersWhenActive")));i.set({isActive:l}),n.x(o),n.y(c),t.classList.toggle("lqd-is-active",l)})}setHoverInteractions(){this.elsCollection.forEach(e=>{const o=e.get("hoverInteractions"),c=e.get("el"),i=e.get("duration");o.forEach(({els:t,animations:s})=>{const n=gsap.timeline({paused:!0});n.to(c,{duration:i,...s}),t.forEach(l=>{l.addEventListener("mouseenter",()=>{e.get("isActive")&&n.play()}),l.addEventListener("mouseleave",()=>{n.kill(),n.reverse()})})})})}onDocPointerMove(e){this.model.set({clientPos:{x:e.clientX,y:e.clientY}}),this.hoveredEl=e.target}onDocPointerDown(){this.view.el.classList.add("lqd-pointer-down")}onDocPointerUp(){this.view.el.classList.remove("lqd-pointer-down")}destroy(){gsap.ticker.remove(this.setCursorPos),super.destroy()}}window.liquid?.app?.model?.set("loadedBehaviors",[...window.liquid.app.model.get("loadedBehaviors"),LiquidStickyCursorBehavior]);